webpackJsonp([39],{1914:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=t(2084),r=t(3),s=r(null,o.a,null,null,null);n.default=s.exports},2039:function(e,n,t){e.exports=t.p+"static/img/login.dc55031.png"},2084:function(e,n,t){"use strict";var o=function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("div",{staticClass:"app-container"},[o("code",[o("h1",[e._v("目录结构")]),e._v(" "),o("e-code-sign",[e._v("\n├── build                      // 构建相关  \n├── config                     // 配置相关\n├── src                        // 源代码\n│   ├── api                    // 所有请求\n│   ├── assets                 // 主题 字体等静态资源\n│   ├── components             // 全局公用组件\n│   ├── directive              // 全局指令\n│   ├── filtres                // 全局filter\n│   ├── router                 // 路由\n│   ├── store                  // 全局store管理\n│   ├── styles                 // 全局样式\n│   ├── utils                  // 全局公用方法\n│   ├── view                   // view\n│   ├── App.vue                // 入口页面\n│   └── main.js                // 入口 加载组件 初始化等\n├── static                     // 第三方不打包资源\n├── .babelrc                   // babel-loader 配置\n├── eslintrc.js                // eslint 配置项\n├── .gitignore                 // git 忽略项\n├── favicon.ico                // favicon图标\n├── index.html                 // html模板\n└── package.json               // package.json\n\t\t")]),e._v(" "),o("h2",[e._v("登陆流程")]),e._v(" "),o("e-code-sign",[o("img",{attrs:{src:t(2039)}})]),e._v(" "),o("h2",[e._v("store用法")]),e._v(" "),o("p",[e._v("在store目录下面新建index.vue")]),e._v(" "),o("e-code-sign",[e._v("\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nVue.use(Vuex)\nconst store = new Vuex.Store({\n  state: {\n    username:'',//用户名\n    token:getToken()//token\n  },\n  mutations:{\n    //存储用户名方法\n    setName:(state, username)=> {\n      state.username = username;\n    },\n    //存储token方法\n    setToken:(state,token)=>{\n      state.token=token;\n\t}\n  }\n})\nexport default store\t\t\t\n\t\t")]),e._v(" "),o("p",[e._v("登录的时候调用这两个方法")]),e._v(" "),o("e-code-sign",[e._v("\nimport axios from 'axios'\nimport store from '../store'\naxios.post('/login', {\n  params: {\n    uname: 'admin',\n    pwd: '123456'\n  }\n}).then(function(response) {\n   var name = response.data.uname;\n   var token = response.data.token;\n   store.commit('setName');\n   store.commit('setToken');\n   // 处理响应\n   // 其中存在后端返回的错误\n}).catch(function(error) {\n   // 网络异常引发的错误\n});\t\t\t\n\t\t")]),e._v(" "),o("h2",[e._v("封装axios")]),e._v(" "),o("e-code-sign",[e._v("\nimport axios from 'axios';\nimport store from '../store';\n// 创建axios实例\nconst service = axios.create({\n  baseURL: process.env.BASE_API, // api的base_url\n  timeout: 5000                  // 请求超时时间\n});\n// request拦截器\nservice.interceptors.request.use(config => {\n  // Do something before request is sent\n  if (store.getters.token) {\n    config.headers['X-Token'] = store.states.token; // 让每个请求携带token--['X-Token']为自定义key 请根据实际情况自行修改\n  }\n  return config;\n}, error => {\n  // Do something with request error\n  console.log(error); // for debug\n  Promise.reject(error);\n})\n// respone拦截器\nservice.interceptors.response.use(\n  response => response\n  /**\n  * 下面的注释为通过response自定义code来标示请求状态，当code返回如下情况为权限有问题，登出并返回到登录页\n  * 如通过xmlhttprequest 状态码标识 逻辑可写在下面error中\n  */\n   const code = response.data.code;\n   // 50014:Token 过期了 50012:其他客户端登录了 50008:非法的token\n   if (code === 50008 || code === 50014 || code === 50012) {\n     // 登出\n     store.dispatch('FedLogOut').then(() => {\n       router.push({ path: '/login' })\n     });\n   } else {\n     return response\n   }\n  ,\n  error => {\n    console.log('err' + error);// for debug\n    return Promise.reject(error);\n  }\n)\nexport default service;\n")])],1)])},r=[],s={render:o,staticRenderFns:r};n.a=s}});